{
    "sourceFile": "controllers/noteController.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 18,
            "patches": [
                {
                    "date": 1733502718950,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1733504135019,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,26 +3,26 @@\n \r\n // Create a new note\r\n export const createNote = [\r\n     body('title').notEmpty().withMessage('Title is required'),\r\n-    body('datetime').notEmpty().isISO8601().withMessage('Valid date is required'),\r\n-    body('note').notEmpty().withMessage('Content is required'),\r\n+    body('date').notEmpty().isISO8601().withMessage('Valid date is required'),\r\n+    body('content').notEmpty().withMessage('Content is required'),\r\n     async (req, res) => {\r\n         const errors = validationResult(req);\r\n         if (!errors.isEmpty()) {\r\n             return res.status(400).json({ errors: errors.array() });\r\n         }\r\n \r\n-        const { title, datetime, note } = req.body;\r\n+        const { title, date, content } = req.body;\r\n \r\n         try {\r\n-            const notes = await Note.create({\r\n+            const note = await Note.create({\r\n                 title,\r\n-                datetime,\r\n-                note\r\n+                date,\r\n+                content\r\n             });\r\n \r\n-            res.status(201).json(notes);\r\n+            res.status(201).json(note);\r\n         } catch (error) {\r\n             console.error(error);\r\n             res.status(500).json({ message: 'Internal server error' });\r\n         }\r\n@@ -56,26 +56,26 @@\n \r\n // Update note\r\n export const updateNote = [\r\n     body('title').notEmpty().withMessage('Title is required'),\r\n-    body('datetime').notEmpty().isISO8601().withMessage('Valid date is required'),\r\n-    body('note').notEmpty().withMessage('Content is required'),\r\n+    body('date').notEmpty().isISO8601().withMessage('Valid date is required'),\r\n+    body('content').notEmpty().withMessage('Content is required'),\r\n     async (req, res) => {\r\n         const errors = validationResult(req);\r\n         if (!errors.isEmpty()) {\r\n             return res.status(400).json({ errors: errors.array() });\r\n         }\r\n \r\n-        const { title, datetime, note } = req.body;\r\n+        const { title, date, content } = req.body;\r\n \r\n         try {\r\n-            const notes = await Note.findOne({\r\n+            const note = await Note.findOne({\r\n                 where: { id: req.params.id },\r\n             });\r\n \r\n-            if (!notes) return res.status(404).json({ message: \"Note not found\" });\r\n+            if (!note) return res.status(404).json({ message: \"Note not found\" });\r\n \r\n-            await Note.update({ title, datetime, note }, {\r\n+            await Note.update({ title, date, content }, {\r\n                 where: { id: req.params.id },\r\n             });\r\n \r\n             res.json({ message: \"Note updated successfully\" });\r\n"
                },
                {
                    "date": 1733504437934,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import Note from \"../models/noteModel.js\";\r\n-import { body, validationResult } from 'express-validator';\r\n \r\n+\r\n // Create a new note\r\n export const createNote = [\r\n     body('title').notEmpty().withMessage('Title is required'),\r\n     body('date').notEmpty().isISO8601().withMessage('Valid date is required'),\r\n"
                },
                {
                    "date": 1733504446334,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import Note from \"../models/noteModel.js\";\r\n+import { body, validationResult } from 'express-validator';\r\n \r\n-\r\n // Create a new note\r\n export const createNote = [\r\n     body('title').notEmpty().withMessage('Title is required'),\r\n     body('date').notEmpty().isISO8601().withMessage('Valid date is required'),\r\n"
                },
                {
                    "date": 1733504759435,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,8 +14,13 @@\n \r\n         const { title, date, content } = req.body;\r\n \r\n         try {\r\n+            // Validate if the date format is valid\r\n+            if (!Date.parse(date)) {\r\n+                return res.status(400).json({ errors: [{ msg: 'Invalid date format. Please use YYYY-MM-DD.' }] });\r\n+            }\r\n+\r\n             const note = await Note.create({\r\n                 title,\r\n                 date,\r\n                 content\r\n@@ -73,16 +78,21 @@\n             });\r\n \r\n             if (!note) return res.status(404).json({ message: \"Note not found\" });\r\n \r\n+            // Validate date format before updating\r\n+            if (!Date.parse(date)) {\r\n+                return res.status(400).json({ errors: [{ msg: 'Invalid date format. Please use YYYY-MM-DD.' }] });\r\n+            }\r\n+\r\n             await Note.update({ title, date, content }, {\r\n                 where: { id: req.params.id },\r\n             });\r\n \r\n             res.json({ message: \"Note updated successfully\" });\r\n         } catch (error) {\r\n             console.error(error);\r\n-            res.status(400).json({ message: error.message });\r\n+            res.status(500).json({ message: error.message });\r\n         }\r\n     }\r\n ];\r\n \r\n"
                },
                {
                    "date": 1733504942092,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,39 +1,39 @@\n import Note from \"../models/noteModel.js\";\r\n-import { body, validationResult } from 'express-validator';\r\n+import { validationResult } from 'express-validator';\r\n \r\n // Create a new note\r\n-export const createNote = [\r\n-    body('title').notEmpty().withMessage('Title is required'),\r\n-    body('date').notEmpty().isISO8601().withMessage('Valid date is required'),\r\n-    body('content').notEmpty().withMessage('Content is required'),\r\n-    async (req, res) => {\r\n-        const errors = validationResult(req);\r\n-        if (!errors.isEmpty()) {\r\n-            return res.status(400).json({ errors: errors.array() });\r\n-        }\r\n+export const createNote = async (req, res) => {\r\n+    // Ambil data dari header request\r\n+    const title = req.headers['x-title'];\r\n+    const date = req.headers['x-date'];\r\n+    const content = req.headers['x-content'];\r\n \r\n-        const { title, date, content } = req.body;\r\n+    // Validasi data\r\n+    if (!title) {\r\n+        return res.status(400).json({ errors: [{ msg: 'Title is required', path: 'title' }] });\r\n+    }\r\n+    if (!date || !Date.parse(date)) {\r\n+        return res.status(400).json({ errors: [{ msg: 'Valid date is required', path: 'date' }] });\r\n+    }\r\n+    if (!content) {\r\n+        return res.status(400).json({ errors: [{ msg: 'Content is required', path: 'content' }] });\r\n+    }\r\n \r\n-        try {\r\n-            // Validate if the date format is valid\r\n-            if (!Date.parse(date)) {\r\n-                return res.status(400).json({ errors: [{ msg: 'Invalid date format. Please use YYYY-MM-DD.' }] });\r\n-            }\r\n+    try {\r\n+        // Buat catatan baru menggunakan data dari header\r\n+        const note = await Note.create({\r\n+            title,\r\n+            date,\r\n+            content\r\n+        });\r\n \r\n-            const note = await Note.create({\r\n-                title,\r\n-                date,\r\n-                content\r\n-            });\r\n-\r\n-            res.status(201).json(note);\r\n-        } catch (error) {\r\n-            console.error(error);\r\n-            res.status(500).json({ message: 'Internal server error' });\r\n-        }\r\n+        res.status(201).json(note);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: 'Internal server error' });\r\n     }\r\n-];\r\n+};\r\n \r\n // Get all notes\r\n export const getNotes = async (req, res) => {\r\n     try {\r\n@@ -59,43 +59,43 @@\n     }\r\n };\r\n \r\n // Update note\r\n-export const updateNote = [\r\n-    body('title').notEmpty().withMessage('Title is required'),\r\n-    body('date').notEmpty().isISO8601().withMessage('Valid date is required'),\r\n-    body('content').notEmpty().withMessage('Content is required'),\r\n-    async (req, res) => {\r\n-        const errors = validationResult(req);\r\n-        if (!errors.isEmpty()) {\r\n-            return res.status(400).json({ errors: errors.array() });\r\n-        }\r\n+export const updateNote = async (req, res) => {\r\n+    // Ambil data dari header request\r\n+    const title = req.headers['x-title'];\r\n+    const date = req.headers['x-date'];\r\n+    const content = req.headers['x-content'];\r\n \r\n-        const { title, date, content } = req.body;\r\n+    // Validasi data\r\n+    if (!title) {\r\n+        return res.status(400).json({ errors: [{ msg: 'Title is required', path: 'title' }] });\r\n+    }\r\n+    if (!date || !Date.parse(date)) {\r\n+        return res.status(400).json({ errors: [{ msg: 'Valid date is required', path: 'date' }] });\r\n+    }\r\n+    if (!content) {\r\n+        return res.status(400).json({ errors: [{ msg: 'Content is required', path: 'content' }] });\r\n+    }\r\n \r\n-        try {\r\n-            const note = await Note.findOne({\r\n-                where: { id: req.params.id },\r\n-            });\r\n+    try {\r\n+        const note = await Note.findOne({\r\n+            where: { id: req.params.id },\r\n+        });\r\n \r\n-            if (!note) return res.status(404).json({ message: \"Note not found\" });\r\n+        if (!note) return res.status(404).json({ message: \"Note not found\" });\r\n \r\n-            // Validate date format before updating\r\n-            if (!Date.parse(date)) {\r\n-                return res.status(400).json({ errors: [{ msg: 'Invalid date format. Please use YYYY-MM-DD.' }] });\r\n-            }\r\n+        // Perbarui catatan dengan data dari header\r\n+        await Note.update({ title, date, content }, {\r\n+            where: { id: req.params.id },\r\n+        });\r\n \r\n-            await Note.update({ title, date, content }, {\r\n-                where: { id: req.params.id },\r\n-            });\r\n-\r\n-            res.json({ message: \"Note updated successfully\" });\r\n-        } catch (error) {\r\n-            console.error(error);\r\n-            res.status(500).json({ message: error.message });\r\n-        }\r\n+        res.json({ message: \"Note updated successfully\" });\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(400).json({ message: error.message });\r\n     }\r\n-];\r\n+};\r\n \r\n // Delete note by ID\r\n export const deleteNote = async (req, res) => {\r\n     try {\r\n"
                },
                {
                    "date": 1733505272386,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,33 +2,31 @@\n import { validationResult } from 'express-validator';\r\n \r\n // Create a new note\r\n export const createNote = async (req, res) => {\r\n-    // Ambil data dari header request\r\n-    const title = req.headers['x-title'];\r\n-    const date = req.headers['x-date'];\r\n-    const content = req.headers['x-content'];\r\n+    // Ambil data dari body request\r\n+    const { title, datetime, content } = req.body;\r\n \r\n     // Validasi data\r\n     if (!title) {\r\n         return res.status(400).json({ errors: [{ msg: 'Title is required', path: 'title' }] });\r\n     }\r\n-    if (!date || !Date.parse(date)) {\r\n-        return res.status(400).json({ errors: [{ msg: 'Valid date is required', path: 'date' }] });\r\n+    if (!datetime || !Date.parse(datetime)) {\r\n+        return res.status(400).json({ errors: [{ msg: 'Valid date is required', path: 'datetime' }] });\r\n     }\r\n     if (!content) {\r\n         return res.status(400).json({ errors: [{ msg: 'Content is required', path: 'content' }] });\r\n     }\r\n \r\n     try {\r\n-        // Buat catatan baru menggunakan data dari header\r\n-        const note = await Note.create({\r\n+        // Buat catatan baru dengan data yang sudah divalidasi\r\n+        const newNote = await Note.create({\r\n             title,\r\n-            date,\r\n-            content\r\n+            datetime,  // Kolom datetime\r\n+            content    // Kolom content\r\n         });\r\n \r\n-        res.status(201).json(note);\r\n+        res.status(201).json(newNote);\r\n     } catch (error) {\r\n         console.error(error);\r\n         res.status(500).json({ message: 'Internal server error' });\r\n     }\r\n@@ -60,19 +58,16 @@\n };\r\n \r\n // Update note\r\n export const updateNote = async (req, res) => {\r\n-    // Ambil data dari header request\r\n-    const title = req.headers['x-title'];\r\n-    const date = req.headers['x-date'];\r\n-    const content = req.headers['x-content'];\r\n+    const { title, datetime, content } = req.body;\r\n \r\n     // Validasi data\r\n     if (!title) {\r\n         return res.status(400).json({ errors: [{ msg: 'Title is required', path: 'title' }] });\r\n     }\r\n-    if (!date || !Date.parse(date)) {\r\n-        return res.status(400).json({ errors: [{ msg: 'Valid date is required', path: 'date' }] });\r\n+    if (!datetime || !Date.parse(datetime)) {\r\n+        return res.status(400).json({ errors: [{ msg: 'Valid date is required', path: 'datetime' }] });\r\n     }\r\n     if (!content) {\r\n         return res.status(400).json({ errors: [{ msg: 'Content is required', path: 'content' }] });\r\n     }\r\n@@ -83,10 +78,9 @@\n         });\r\n \r\n         if (!note) return res.status(404).json({ message: \"Note not found\" });\r\n \r\n-        // Perbarui catatan dengan data dari header\r\n-        await Note.update({ title, date, content }, {\r\n+        await Note.update({ title, datetime, content }, {\r\n             where: { id: req.params.id },\r\n         });\r\n \r\n         res.json({ message: \"Note updated successfully\" });\r\n"
                },
                {
                    "date": 1733505413052,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,37 +1,39 @@\n import Note from \"../models/noteModel.js\";\r\n-import { validationResult } from 'express-validator';\r\n+import { body, validationResult } from 'express-validator';\r\n \r\n // Create a new note\r\n-export const createNote = async (req, res) => {\r\n-    // Ambil data dari body request\r\n-    const { title, datetime, content } = req.body;\r\n+export const createNote = [\r\n+    body('title').notEmpty().withMessage('Title is required'),\r\n+    body('date').notEmpty().isISO8601().withMessage('Valid date is required'),\r\n+    body('content').notEmpty().withMessage('Content is required'),\r\n+    async (req, res) => {\r\n+        const errors = validationResult(req);\r\n+        if (!errors.isEmpty()) {\r\n+            return res.status(400).json({ errors: errors.array() });\r\n+        }\r\n \r\n-    // Validasi data\r\n-    if (!title) {\r\n-        return res.status(400).json({ errors: [{ msg: 'Title is required', path: 'title' }] });\r\n-    }\r\n-    if (!datetime || !Date.parse(datetime)) {\r\n-        return res.status(400).json({ errors: [{ msg: 'Valid date is required', path: 'datetime' }] });\r\n-    }\r\n-    if (!content) {\r\n-        return res.status(400).json({ errors: [{ msg: 'Content is required', path: 'content' }] });\r\n-    }\r\n+        const { title, date, content } = req.body;\r\n \r\n-    try {\r\n-        // Buat catatan baru dengan data yang sudah divalidasi\r\n-        const newNote = await Note.create({\r\n-            title,\r\n-            datetime,  // Kolom datetime\r\n-            content    // Kolom content\r\n-        });\r\n+        try {\r\n+            // Validate if the date format is valid\r\n+            if (!Date.parse(date)) {\r\n+                return res.status(400).json({ errors: [{ msg: 'Invalid date format. Please use YYYY-MM-DD.' }] });\r\n+            }\r\n \r\n-        res.status(201).json(newNote);\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: 'Internal server error' });\r\n+            const note = await Note.create({\r\n+                title,\r\n+                date,\r\n+                content\r\n+            });\r\n+\r\n+            res.status(201).json(note);\r\n+        } catch (error) {\r\n+            console.error(error);\r\n+            res.status(500).json({ message: 'Internal server error' });\r\n+        }\r\n     }\r\n-};\r\n+];\r\n \r\n // Get all notes\r\n export const getNotes = async (req, res) => {\r\n     try {\r\n@@ -57,39 +59,43 @@\n     }\r\n };\r\n \r\n // Update note\r\n-export const updateNote = async (req, res) => {\r\n-    const { title, datetime, content } = req.body;\r\n+export const updateNote = [\r\n+    body('title').notEmpty().withMessage('Title is required'),\r\n+    body('date').notEmpty().isISO8601().withMessage('Valid date is required'),\r\n+    body('content').notEmpty().withMessage('Content is required'),\r\n+    async (req, res) => {\r\n+        const errors = validationResult(req);\r\n+        if (!errors.isEmpty()) {\r\n+            return res.status(400).json({ errors: errors.array() });\r\n+        }\r\n \r\n-    // Validasi data\r\n-    if (!title) {\r\n-        return res.status(400).json({ errors: [{ msg: 'Title is required', path: 'title' }] });\r\n-    }\r\n-    if (!datetime || !Date.parse(datetime)) {\r\n-        return res.status(400).json({ errors: [{ msg: 'Valid date is required', path: 'datetime' }] });\r\n-    }\r\n-    if (!content) {\r\n-        return res.status(400).json({ errors: [{ msg: 'Content is required', path: 'content' }] });\r\n-    }\r\n+        const { title, date, content } = req.body;\r\n \r\n-    try {\r\n-        const note = await Note.findOne({\r\n-            where: { id: req.params.id },\r\n-        });\r\n+        try {\r\n+            const note = await Note.findOne({\r\n+                where: { id: req.params.id },\r\n+            });\r\n \r\n-        if (!note) return res.status(404).json({ message: \"Note not found\" });\r\n+            if (!note) return res.status(404).json({ message: \"Note not found\" });\r\n \r\n-        await Note.update({ title, datetime, content }, {\r\n-            where: { id: req.params.id },\r\n-        });\r\n+            // Validate date format before updating\r\n+            if (!Date.parse(date)) {\r\n+                return res.status(400).json({ errors: [{ msg: 'Invalid date format. Please use YYYY-MM-DD.' }] });\r\n+            }\r\n \r\n-        res.json({ message: \"Note updated successfully\" });\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(400).json({ message: error.message });\r\n+            await Note.update({ title, date, content }, {\r\n+                where: { id: req.params.id },\r\n+            });\r\n+\r\n+            res.json({ message: \"Note updated successfully\" });\r\n+        } catch (error) {\r\n+            console.error(error);\r\n+            res.status(500).json({ message: error.message });\r\n+        }\r\n     }\r\n-};\r\n+];\r\n \r\n // Delete note by ID\r\n export const deleteNote = async (req, res) => {\r\n     try {\r\n"
                },
                {
                    "date": 1733505513132,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,119 @@\n+import Note from \"../models/noteModel.js\";\r\n+import { body, validationResult } from 'express-validator';\r\n+\r\n+// Create a new note\r\n+export const createNote = [\r\n+    body('title').notEmpty().withMessage('Title is required'),\r\n+    body('datetime').notEmpty().isISO8601().withMessage('Valid date is required'),\r\n+    body('note').notEmpty().withMessage('Content is required'),\r\n+    async (req, res) => {\r\n+        const errors = validationResult(req);\r\n+        if (!errors.isEmpty()) {\r\n+            return res.status(400).json({ errors: errors.array() });\r\n+        }\r\n+\r\n+        const { title, datetime, note } = req.body;\r\n+\r\n+        try {\r\n+            // Validate if the datetime format is valid\r\n+            if (!Date.parse(datetime)) {\r\n+                return res.status(400).json({ errors: [{ msg: 'Invalid date format. Please use YYYY-MM-DD.' }] });\r\n+            }\r\n+\r\n+            const createdNote = await Note.create({\r\n+                title,\r\n+                datetime,\r\n+                note\r\n+            });\r\n+\r\n+            res.status(201).json(createdNote);\r\n+        } catch (error) {\r\n+            console.error(error);\r\n+            res.status(500).json({ message: 'Internal server error' });\r\n+        }\r\n+    }\r\n+];\r\n+\r\n+// Get all notes\r\n+export const getNotes = async (req, res) => {\r\n+    try {\r\n+        const notes = await Note.findAll();\r\n+        res.json(notes);\r\n+    } catch (error) {\r\n+        res.status(500).json({ message: error.message });\r\n+    }\r\n+};\r\n+\r\n+// Get single note by ID\r\n+export const getNoteById = async (req, res) => {\r\n+    try {\r\n+        const note = await Note.findOne({\r\n+            where: {\r\n+                id: req.params.id,\r\n+            },\r\n+        });\r\n+        if (!note) return res.status(404).json({ message: \"Note not found\" });\r\n+        res.json(note);\r\n+    } catch (error) {\r\n+        res.status(500).json({ message: error.message });\r\n+    }\r\n+};\r\n+\r\n+// Update note\r\n+export const updateNote = [\r\n+    body('title').notEmpty().withMessage('Title is required'),\r\n+    body('datetime').notEmpty().isISO8601().withMessage('Valid date is required'),\r\n+    body('note').notEmpty().withMessage('Content is required'),\r\n+    async (req, res) => {\r\n+        const errors = validationResult(req);\r\n+        if (!errors.isEmpty()) {\r\n+            return res.status(400).json({ errors: errors.array() });\r\n+        }\r\n+\r\n+        const { title, datetime, note } = req.body;\r\n+\r\n+        try {\r\n+            const noteToUpdate = await Note.findOne({\r\n+                where: { id: req.params.id },\r\n+            });\r\n+\r\n+            if (!noteToUpdate) return res.status(404).json({ message: \"Note not found\" });\r\n+\r\n+            // Validate datetime format before updating\r\n+            if (!Date.parse(datetime)) {\r\n+                return res.status(400).json({ errors: [{ msg: 'Invalid date format. Please use YYYY-MM-DD.' }] });\r\n+            }\r\n+\r\n+            await Note.update({ title, datetime, note }, {\r\n+                where: { id: req.params.id },\r\n+            });\r\n+\r\n+            res.json({ message: \"Note updated successfully\" });\r\n+        } catch (error) {\r\n+            console.error(error);\r\n+            res.status(500).json({ message: error.message });\r\n+        }\r\n+    }\r\n+];\r\n+\r\n+// Delete note by ID\r\n+export const deleteNote = async (req, res) => {\r\n+    try {\r\n+        const note = await Note.findOne({\r\n+            where: {\r\n+                id: req.params.id,\r\n+            },\r\n+        });\r\n+        if (!note) return res.status(404).json({ message: \"Note not found\" });\r\n+\r\n+        await Note.destroy({\r\n+            where: {\r\n+                id: req.params.id,\r\n+            },\r\n+        });\r\n+\r\n+        res.json({ message: \"Note deleted successfully\" });\r\n+    } catch (error) {\r\n+        res.status(500).json({ message: error.message });\r\n+    }\r\n+};\r\n"
                },
                {
                    "date": 1733505541075,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,39 +1,37 @@\n import Note from \"../models/noteModel.js\";\r\n-import { body, validationResult } from 'express-validator';\r\n+import { validationResult } from 'express-validator';\r\n \r\n // Create a new note\r\n-export const createNote = [\r\n-    body('title').notEmpty().withMessage('Title is required'),\r\n-    body('datetime').notEmpty().isISO8601().withMessage('Valid date is required'),\r\n-    body('note').notEmpty().withMessage('Content is required'),\r\n-    async (req, res) => {\r\n-        const errors = validationResult(req);\r\n-        if (!errors.isEmpty()) {\r\n-            return res.status(400).json({ errors: errors.array() });\r\n-        }\r\n+export const createNote = async (req, res) => {\r\n+    // Ambil data dari body request\r\n+    const { title, datetime, content } = req.body;\r\n \r\n-        const { title, datetime, note } = req.body;\r\n+    // Validasi data\r\n+    if (!title) {\r\n+        return res.status(400).json({ errors: [{ msg: 'Title is required', path: 'title' }] });\r\n+    }\r\n+    if (!datetime || !Date.parse(datetime)) {\r\n+        return res.status(400).json({ errors: [{ msg: 'Valid date is required', path: 'datetime' }] });\r\n+    }\r\n+    if (!content) {\r\n+        return res.status(400).json({ errors: [{ msg: 'Content is required', path: 'content' }] });\r\n+    }\r\n \r\n-        try {\r\n-            // Validate if the datetime format is valid\r\n-            if (!Date.parse(datetime)) {\r\n-                return res.status(400).json({ errors: [{ msg: 'Invalid date format. Please use YYYY-MM-DD.' }] });\r\n-            }\r\n+    try {\r\n+        // Buat catatan baru dengan data yang sudah divalidasi\r\n+        const newNote = await Note.create({\r\n+            title,\r\n+            datetime,  // Kolom datetime\r\n+            content    // Kolom content\r\n+        });\r\n \r\n-            const createdNote = await Note.create({\r\n-                title,\r\n-                datetime,\r\n-                note\r\n-            });\r\n-\r\n-            res.status(201).json(createdNote);\r\n-        } catch (error) {\r\n-            console.error(error);\r\n-            res.status(500).json({ message: 'Internal server error' });\r\n-        }\r\n+        res.status(201).json(newNote);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: 'Internal server error' });\r\n     }\r\n-];\r\n+};\r\n \r\n // Get all notes\r\n export const getNotes = async (req, res) => {\r\n     try {\r\n@@ -59,163 +57,40 @@\n     }\r\n };\r\n \r\n // Update note\r\n-export const updateNote = [\r\n-    body('title').notEmpty().withMessage('Title is required'),\r\n-    body('datetime').notEmpty().isISO8601().withMessage('Valid date is required'),\r\n-    body('note').notEmpty().withMessage('Content is required'),\r\n-    async (req, res) => {\r\n-        const errors = validationResult(req);\r\n-        if (!errors.isEmpty()) {\r\n-            return res.status(400).json({ errors: errors.array() });\r\n-        }\r\n+export const updateNote = async (req, res) => {\r\n+    const { title, datetime, content } = req.body;\r\n \r\n-        const { title, datetime, note } = req.body;\r\n-\r\n-        try {\r\n-            const noteToUpdate = await Note.findOne({\r\n-                where: { id: req.params.id },\r\n-            });\r\n-\r\n-            if (!noteToUpdate) return res.status(404).json({ message: \"Note not found\" });\r\n-\r\n-            // Validate datetime format before updating\r\n-            if (!Date.parse(datetime)) {\r\n-                return res.status(400).json({ errors: [{ msg: 'Invalid date format. Please use YYYY-MM-DD.' }] });\r\n-            }\r\n-\r\n-            await Note.update({ title, datetime, note }, {\r\n-                where: { id: req.params.id },\r\n-            });\r\n-\r\n-            res.json({ message: \"Note updated successfully\" });\r\n-        } catch (error) {\r\n-            console.error(error);\r\n-            res.status(500).json({ message: error.message });\r\n-        }\r\n+    // Validasi data\r\n+    if (!title) {\r\n+        return res.status(400).json({ errors: [{ msg: 'Title is required', path: 'title' }] });\r\n     }\r\n-];\r\n+    if (!datetime || !Date.parse(datetime)) {\r\n+        return res.status(400).json({ errors: [{ msg: 'Valid date is required', path: 'datetime' }] });\r\n+    }\r\n+    if (!content) {\r\n+        return res.status(400).json({ errors: [{ msg: 'Content is required', path: 'content' }] });\r\n+    }\r\n \r\n-// Delete note by ID\r\n-export const deleteNote = async (req, res) => {\r\n     try {\r\n         const note = await Note.findOne({\r\n-            where: {\r\n-                id: req.params.id,\r\n-            },\r\n+            where: { id: req.params.id },\r\n         });\r\n+\r\n         if (!note) return res.status(404).json({ message: \"Note not found\" });\r\n \r\n-        await Note.destroy({\r\n-            where: {\r\n-                id: req.params.id,\r\n-            },\r\n+        await Note.update({ title, datetime, content }, {\r\n+            where: { id: req.params.id },\r\n         });\r\n \r\n-        res.json({ message: \"Note deleted successfully\" });\r\n+        res.json({ message: \"Note updated successfully\" });\r\n     } catch (error) {\r\n-        res.status(500).json({ message: error.message });\r\n+        console.error(error);\r\n+        res.status(400).json({ message: error.message });\r\n     }\r\n };\r\n-import Note from \"../models/noteModel.js\";\r\n-import { body, validationResult } from 'express-validator';\r\n \r\n-// Create a new note\r\n-export const createNote = [\r\n-    body('title').notEmpty().withMessage('Title is required'),\r\n-    body('date').notEmpty().isISO8601().withMessage('Valid date is required'),\r\n-    body('content').notEmpty().withMessage('Content is required'),\r\n-    async (req, res) => {\r\n-        const errors = validationResult(req);\r\n-        if (!errors.isEmpty()) {\r\n-            return res.status(400).json({ errors: errors.array() });\r\n-        }\r\n-\r\n-        const { title, date, content } = req.body;\r\n-\r\n-        try {\r\n-            // Validate if the date format is valid\r\n-            if (!Date.parse(date)) {\r\n-                return res.status(400).json({ errors: [{ msg: 'Invalid date format. Please use YYYY-MM-DD.' }] });\r\n-            }\r\n-\r\n-            const note = await Note.create({\r\n-                title,\r\n-                date,\r\n-                content\r\n-            });\r\n-\r\n-            res.status(201).json(note);\r\n-        } catch (error) {\r\n-            console.error(error);\r\n-            res.status(500).json({ message: 'Internal server error' });\r\n-        }\r\n-    }\r\n-];\r\n-\r\n-// Get all notes\r\n-export const getNotes = async (req, res) => {\r\n-    try {\r\n-        const notes = await Note.findAll();\r\n-        res.json(notes);\r\n-    } catch (error) {\r\n-        res.status(500).json({ message: error.message });\r\n-    }\r\n-};\r\n-\r\n-// Get single note by ID\r\n-export const getNoteById = async (req, res) => {\r\n-    try {\r\n-        const note = await Note.findOne({\r\n-            where: {\r\n-                id: req.params.id,\r\n-            },\r\n-        });\r\n-        if (!note) return res.status(404).json({ message: \"Note not found\" });\r\n-        res.json(note);\r\n-    } catch (error) {\r\n-        res.status(500).json({ message: error.message });\r\n-    }\r\n-};\r\n-\r\n-// Update note\r\n-export const updateNote = [\r\n-    body('title').notEmpty().withMessage('Title is required'),\r\n-    body('date').notEmpty().isISO8601().withMessage('Valid date is required'),\r\n-    body('content').notEmpty().withMessage('Content is required'),\r\n-    async (req, res) => {\r\n-        const errors = validationResult(req);\r\n-        if (!errors.isEmpty()) {\r\n-            return res.status(400).json({ errors: errors.array() });\r\n-        }\r\n-\r\n-        const { title, date, content } = req.body;\r\n-\r\n-        try {\r\n-            const note = await Note.findOne({\r\n-                where: { id: req.params.id },\r\n-            });\r\n-\r\n-            if (!note) return res.status(404).json({ message: \"Note not found\" });\r\n-\r\n-            // Validate date format before updating\r\n-            if (!Date.parse(date)) {\r\n-                return res.status(400).json({ errors: [{ msg: 'Invalid date format. Please use YYYY-MM-DD.' }] });\r\n-            }\r\n-\r\n-            await Note.update({ title, date, content }, {\r\n-                where: { id: req.params.id },\r\n-            });\r\n-\r\n-            res.json({ message: \"Note updated successfully\" });\r\n-        } catch (error) {\r\n-            console.error(error);\r\n-            res.status(500).json({ message: error.message });\r\n-        }\r\n-    }\r\n-];\r\n-\r\n // Delete note by ID\r\n export const deleteNote = async (req, res) => {\r\n     try {\r\n         const note = await Note.findOne({\r\n"
                },
                {
                    "date": 1733505833119,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,37 +1,39 @@\n import Note from \"../models/noteModel.js\";\r\n-import { validationResult } from 'express-validator';\r\n+import { body, validationResult } from 'express-validator';\r\n \r\n // Create a new note\r\n-export const createNote = async (req, res) => {\r\n-    // Ambil data dari body request\r\n-    const { title, datetime, content } = req.body;\r\n+export const createNote = [\r\n+    body('title').notEmpty().withMessage('Title is required'),\r\n+    body('datetime').notEmpty().isISO8601().withMessage('Valid date is required'),\r\n+    body('note').notEmpty().withMessage('Content is required'),\r\n+    async (req, res) => {\r\n+        const errors = validationResult(req);\r\n+        if (!errors.isEmpty()) {\r\n+            return res.status(400).json({ errors: errors.array() });\r\n+        }\r\n \r\n-    // Validasi data\r\n-    if (!title) {\r\n-        return res.status(400).json({ errors: [{ msg: 'Title is required', path: 'title' }] });\r\n-    }\r\n-    if (!datetime || !Date.parse(datetime)) {\r\n-        return res.status(400).json({ errors: [{ msg: 'Valid date is required', path: 'datetime' }] });\r\n-    }\r\n-    if (!content) {\r\n-        return res.status(400).json({ errors: [{ msg: 'Content is required', path: 'content' }] });\r\n-    }\r\n+        const { title, datetime, note } = req.body;\r\n \r\n-    try {\r\n-        // Buat catatan baru dengan data yang sudah divalidasi\r\n-        const newNote = await Note.create({\r\n-            title,\r\n-            datetime,  // Kolom datetime\r\n-            content    // Kolom content\r\n-        });\r\n+        try {\r\n+            // Validate if the datetime format is valid\r\n+            if (!Date.parse(datetime)) {\r\n+                return res.status(400).json({ errors: [{ msg: 'Invalid date format. Please use YYYY-MM-DD.' }] });\r\n+            }\r\n \r\n-        res.status(201).json(newNote);\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: 'Internal server error' });\r\n+            const createdNote = await Note.create({\r\n+                title,\r\n+                datetime,\r\n+                note\r\n+            });\r\n+\r\n+            res.status(201).json(createdNote);\r\n+        } catch (error) {\r\n+            console.error(error);\r\n+            res.status(500).json({ message: 'Internal server error' });\r\n+        }\r\n     }\r\n-};\r\n+];\r\n \r\n // Get all notes\r\n export const getNotes = async (req, res) => {\r\n     try {\r\n@@ -57,39 +59,43 @@\n     }\r\n };\r\n \r\n // Update note\r\n-export const updateNote = async (req, res) => {\r\n-    const { title, datetime, content } = req.body;\r\n+export const updateNote = [\r\n+    body('title').notEmpty().withMessage('Title is required'),\r\n+    body('datetime').notEmpty().isISO8601().withMessage('Valid date is required'),\r\n+    body('note').notEmpty().withMessage('Content is required'),\r\n+    async (req, res) => {\r\n+        const errors = validationResult(req);\r\n+        if (!errors.isEmpty()) {\r\n+            return res.status(400).json({ errors: errors.array() });\r\n+        }\r\n \r\n-    // Validasi data\r\n-    if (!title) {\r\n-        return res.status(400).json({ errors: [{ msg: 'Title is required', path: 'title' }] });\r\n-    }\r\n-    if (!datetime || !Date.parse(datetime)) {\r\n-        return res.status(400).json({ errors: [{ msg: 'Valid date is required', path: 'datetime' }] });\r\n-    }\r\n-    if (!content) {\r\n-        return res.status(400).json({ errors: [{ msg: 'Content is required', path: 'content' }] });\r\n-    }\r\n+        const { title, datetime, note } = req.body;\r\n \r\n-    try {\r\n-        const note = await Note.findOne({\r\n-            where: { id: req.params.id },\r\n-        });\r\n+        try {\r\n+            const noteToUpdate = await Note.findOne({\r\n+                where: { id: req.params.id },\r\n+            });\r\n \r\n-        if (!note) return res.status(404).json({ message: \"Note not found\" });\r\n+            if (!noteToUpdate) return res.status(404).json({ message: \"Note not found\" });\r\n \r\n-        await Note.update({ title, datetime, content }, {\r\n-            where: { id: req.params.id },\r\n-        });\r\n+            // Validate datetime format before updating\r\n+            if (!Date.parse(datetime)) {\r\n+                return res.status(400).json({ errors: [{ msg: 'Invalid date format. Please use YYYY-MM-DD.' }] });\r\n+            }\r\n \r\n-        res.json({ message: \"Note updated successfully\" });\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(400).json({ message: error.message });\r\n+            await Note.update({ title, datetime, note }, {\r\n+                where: { id: req.params.id },\r\n+            });\r\n+\r\n+            res.json({ message: \"Note updated successfully\" });\r\n+        } catch (error) {\r\n+            console.error(error);\r\n+            res.status(500).json({ message: error.message });\r\n+        }\r\n     }\r\n-};\r\n+];\r\n \r\n // Delete note by ID\r\n export const deleteNote = async (req, res) => {\r\n     try {\r\n"
                },
                {
                    "date": 1733505917434,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,31 +3,26 @@\n \r\n // Create a new note\r\n export const createNote = [\r\n     body('title').notEmpty().withMessage('Title is required'),\r\n-    body('datetime').notEmpty().isISO8601().withMessage('Valid date is required'),\r\n-    body('note').notEmpty().withMessage('Content is required'),\r\n+    body('date').notEmpty().isISO8601().withMessage('Valid date is required'),\r\n+    body('content').notEmpty().withMessage('Content is required'),\r\n     async (req, res) => {\r\n         const errors = validationResult(req);\r\n         if (!errors.isEmpty()) {\r\n             return res.status(400).json({ errors: errors.array() });\r\n         }\r\n \r\n-        const { title, datetime, note } = req.body;\r\n+        const { title, date, content } = req.body;\r\n \r\n         try {\r\n-            // Validate if the datetime format is valid\r\n-            if (!Date.parse(datetime)) {\r\n-                return res.status(400).json({ errors: [{ msg: 'Invalid date format. Please use YYYY-MM-DD.' }] });\r\n-            }\r\n-\r\n-            const createdNote = await Note.create({\r\n+            const note = await Note.create({\r\n                 title,\r\n-                datetime,\r\n-                note\r\n+                date,\r\n+                content\r\n             });\r\n \r\n-            res.status(201).json(createdNote);\r\n+            res.status(201).json(note);\r\n         } catch (error) {\r\n             console.error(error);\r\n             res.status(500).json({ message: 'Internal server error' });\r\n         }\r\n@@ -61,38 +56,33 @@\n \r\n // Update note\r\n export const updateNote = [\r\n     body('title').notEmpty().withMessage('Title is required'),\r\n-    body('datetime').notEmpty().isISO8601().withMessage('Valid date is required'),\r\n-    body('note').notEmpty().withMessage('Content is required'),\r\n+    body('date').notEmpty().isISO8601().withMessage('Valid date is required'),\r\n+    body('content').notEmpty().withMessage('Content is required'),\r\n     async (req, res) => {\r\n         const errors = validationResult(req);\r\n         if (!errors.isEmpty()) {\r\n             return res.status(400).json({ errors: errors.array() });\r\n         }\r\n \r\n-        const { title, datetime, note } = req.body;\r\n+        const { title, date, content } = req.body;\r\n \r\n         try {\r\n-            const noteToUpdate = await Note.findOne({\r\n+            const note = await Note.findOne({\r\n                 where: { id: req.params.id },\r\n             });\r\n \r\n-            if (!noteToUpdate) return res.status(404).json({ message: \"Note not found\" });\r\n+            if (!note) return res.status(404).json({ message: \"Note not found\" });\r\n \r\n-            // Validate datetime format before updating\r\n-            if (!Date.parse(datetime)) {\r\n-                return res.status(400).json({ errors: [{ msg: 'Invalid date format. Please use YYYY-MM-DD.' }] });\r\n-            }\r\n-\r\n-            await Note.update({ title, datetime, note }, {\r\n+            await Note.update({ title, date, content }, {\r\n                 where: { id: req.params.id },\r\n             });\r\n \r\n             res.json({ message: \"Note updated successfully\" });\r\n         } catch (error) {\r\n             console.error(error);\r\n-            res.status(500).json({ message: error.message });\r\n+            res.status(400).json({ message: error.message });\r\n         }\r\n     }\r\n ];\r\n \r\n"
                },
                {
                    "date": 1733506189545,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,34 +1,43 @@\n import Note from \"../models/noteModel.js\";\r\n import { body, validationResult } from 'express-validator';\r\n \r\n // Create a new note\r\n-export const createNote = [\r\n-    body('title').notEmpty().withMessage('Title is required'),\r\n-    body('date').notEmpty().isISO8601().withMessage('Valid date is required'),\r\n-    body('content').notEmpty().withMessage('Content is required'),\r\n-    async (req, res) => {\r\n-        const errors = validationResult(req);\r\n-        if (!errors.isEmpty()) {\r\n-            return res.status(400).json({ errors: errors.array() });\r\n-        }\r\n+export const createNote = async (req, res) => {\r\n+    const errors = validationResult(req);\r\n+    if (!errors.isEmpty()) {\r\n+        return res.status(400).json({ errors: errors.array() });\r\n+    }\r\n \r\n-        const { title, date, content } = req.body;\r\n+    // Get data from headers\r\n+    const title = req.headers['x-title'];\r\n+    const datetime = req.headers['x-date'];\r\n+    const content = req.headers['x-content'];\r\n \r\n-        try {\r\n-            const note = await Note.create({\r\n-                title,\r\n-                date,\r\n-                content\r\n-            });\r\n+    // Check if all required headers are provided\r\n+    if (!title || !datetime || !content) {\r\n+        return res.status(400).json({ message: 'Missing required headers (x-title, x-date, or x-content)' });\r\n+    }\r\n \r\n-            res.status(201).json(note);\r\n-        } catch (error) {\r\n-            console.error(error);\r\n-            res.status(500).json({ message: 'Internal server error' });\r\n+    try {\r\n+        // Validate if the datetime format is valid\r\n+        if (!Date.parse(datetime)) {\r\n+            return res.status(400).json({ errors: [{ msg: 'Invalid date format. Please use YYYY-MM-DD.' }] });\r\n         }\r\n+\r\n+        // Create a new note in the database\r\n+        const note = await Note.create({\r\n+            title,\r\n+            datetime,\r\n+            note: content\r\n+        });\r\n+\r\n+        res.status(201).json(note);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: 'Internal server error' });\r\n     }\r\n-];\r\n+};\r\n \r\n // Get all notes\r\n export const getNotes = async (req, res) => {\r\n     try {\r\n"
                },
                {
                    "date": 1733506232299,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,118 @@\n+import Note from \"../models/noteModel.js\";\r\n+import { body, validationResult } from 'express-validator';\r\n+\r\n+// Create a new note\r\n+export const createNote = async (req, res) => {\r\n+    const errors = validationResult(req);\r\n+    if (!errors.isEmpty()) {\r\n+        return res.status(400).json({ errors: errors.array() });\r\n+    }\r\n+\r\n+    // Get data from headers\r\n+    const title = req.headers['x-title'];\r\n+    const datetime = req.headers['x-date'];\r\n+    const content = req.headers['x-content'];\r\n+\r\n+    // Check if all required headers are provided\r\n+    if (!title || !datetime || !content) {\r\n+        return res.status(400).json({ message: 'Missing required headers (x-title, x-date, or x-content)' });\r\n+    }\r\n+\r\n+    try {\r\n+        // Validate if the datetime format is valid\r\n+        if (!Date.parse(datetime)) {\r\n+            return res.status(400).json({ errors: [{ msg: 'Invalid date format. Please use YYYY-MM-DD.' }] });\r\n+        }\r\n+\r\n+        // Create a new note in the database\r\n+        const note = await Note.create({\r\n+            title,\r\n+            datetime,\r\n+            note: content\r\n+        });\r\n+\r\n+        res.status(201).json(note);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: 'Internal server error' });\r\n+    }\r\n+};\r\n+\r\n+// Get all notes\r\n+export const getNotes = async (req, res) => {\r\n+    try {\r\n+        const notes = await Note.findAll();\r\n+        res.json(notes);\r\n+    } catch (error) {\r\n+        res.status(500).json({ message: error.message });\r\n+    }\r\n+};\r\n+\r\n+// Get single note by ID\r\n+export const getNoteById = async (req, res) => {\r\n+    try {\r\n+        const note = await Note.findOne({\r\n+            where: {\r\n+                id: req.params.id,\r\n+            },\r\n+        });\r\n+        if (!note) return res.status(404).json({ message: \"Note not found\" });\r\n+        res.json(note);\r\n+    } catch (error) {\r\n+        res.status(500).json({ message: error.message });\r\n+    }\r\n+};\r\n+\r\n+// Update note\r\n+export const updateNote = [\r\n+    body('title').notEmpty().withMessage('Title is required'),\r\n+    body('date').notEmpty().isISO8601().withMessage('Valid date is required'),\r\n+    body('content').notEmpty().withMessage('Content is required'),\r\n+    async (req, res) => {\r\n+        const errors = validationResult(req);\r\n+        if (!errors.isEmpty()) {\r\n+            return res.status(400).json({ errors: errors.array() });\r\n+        }\r\n+\r\n+        const { title, date, content } = req.body;\r\n+\r\n+        try {\r\n+            const note = await Note.findOne({\r\n+                where: { id: req.params.id },\r\n+            });\r\n+\r\n+            if (!note) return res.status(404).json({ message: \"Note not found\" });\r\n+\r\n+            await Note.update({ title, date, content }, {\r\n+                where: { id: req.params.id },\r\n+            });\r\n+\r\n+            res.json({ message: \"Note updated successfully\" });\r\n+        } catch (error) {\r\n+            console.error(error);\r\n+            res.status(400).json({ message: error.message });\r\n+        }\r\n+    }\r\n+];\r\n+\r\n+// Delete note by ID\r\n+export const deleteNote = async (req, res) => {\r\n+    try {\r\n+        const note = await Note.findOne({\r\n+            where: {\r\n+                id: req.params.id,\r\n+            },\r\n+        });\r\n+        if (!note) return res.status(404).json({ message: \"Note not found\" });\r\n+\r\n+        await Note.destroy({\r\n+            where: {\r\n+                id: req.params.id,\r\n+            },\r\n+        });\r\n+\r\n+        res.json({ message: \"Note deleted successfully\" });\r\n+    } catch (error) {\r\n+        res.status(500).json({ message: error.message });\r\n+    }\r\n+};\r\n"
                },
                {
                    "date": 1733506496358,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,26 +9,26 @@\n     }\r\n \r\n     // Get data from headers\r\n     const title = req.headers['x-title'];\r\n-    const datetime = req.headers['x-date'];\r\n+    const date = req.headers['x-date']; // Updated to 'date'\r\n     const content = req.headers['x-content'];\r\n \r\n     // Check if all required headers are provided\r\n-    if (!title || !datetime || !content) {\r\n+    if (!title || !date || !content) {\r\n         return res.status(400).json({ message: 'Missing required headers (x-title, x-date, or x-content)' });\r\n     }\r\n \r\n     try {\r\n-        // Validate if the datetime format is valid\r\n-        if (!Date.parse(datetime)) {\r\n+        // Validate if the date format is valid\r\n+        if (!Date.parse(date)) {\r\n             return res.status(400).json({ errors: [{ msg: 'Invalid date format. Please use YYYY-MM-DD.' }] });\r\n         }\r\n \r\n         // Create a new note in the database\r\n         const note = await Note.create({\r\n             title,\r\n-            datetime,\r\n+            date, // Updated to 'date'\r\n             note: content\r\n         });\r\n \r\n         res.status(201).json(note);\r\n@@ -65,9 +65,9 @@\n \r\n // Update note\r\n export const updateNote = [\r\n     body('title').notEmpty().withMessage('Title is required'),\r\n-    body('date').notEmpty().isISO8601().withMessage('Valid date is required'),\r\n+    body('date').notEmpty().isISO8601().withMessage('Valid date is required'), // Updated to 'date'\r\n     body('content').notEmpty().withMessage('Content is required'),\r\n     async (req, res) => {\r\n         const errors = validationResult(req);\r\n         if (!errors.isEmpty()) {\r\n@@ -115,122 +115,4 @@\n     } catch (error) {\r\n         res.status(500).json({ message: error.message });\r\n     }\r\n };\r\n-import Note from \"../models/noteModel.js\";\r\n-import { body, validationResult } from 'express-validator';\r\n-\r\n-// Create a new note\r\n-export const createNote = async (req, res) => {\r\n-    const errors = validationResult(req);\r\n-    if (!errors.isEmpty()) {\r\n-        return res.status(400).json({ errors: errors.array() });\r\n-    }\r\n-\r\n-    // Get data from headers\r\n-    const title = req.headers['x-title'];\r\n-    const datetime = req.headers['x-date'];\r\n-    const content = req.headers['x-content'];\r\n-\r\n-    // Check if all required headers are provided\r\n-    if (!title || !datetime || !content) {\r\n-        return res.status(400).json({ message: 'Missing required headers (x-title, x-date, or x-content)' });\r\n-    }\r\n-\r\n-    try {\r\n-        // Validate if the datetime format is valid\r\n-        if (!Date.parse(datetime)) {\r\n-            return res.status(400).json({ errors: [{ msg: 'Invalid date format. Please use YYYY-MM-DD.' }] });\r\n-        }\r\n-\r\n-        // Create a new note in the database\r\n-        const note = await Note.create({\r\n-            title,\r\n-            datetime,\r\n-            note: content\r\n-        });\r\n-\r\n-        res.status(201).json(note);\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: 'Internal server error' });\r\n-    }\r\n-};\r\n-\r\n-// Get all notes\r\n-export const getNotes = async (req, res) => {\r\n-    try {\r\n-        const notes = await Note.findAll();\r\n-        res.json(notes);\r\n-    } catch (error) {\r\n-        res.status(500).json({ message: error.message });\r\n-    }\r\n-};\r\n-\r\n-// Get single note by ID\r\n-export const getNoteById = async (req, res) => {\r\n-    try {\r\n-        const note = await Note.findOne({\r\n-            where: {\r\n-                id: req.params.id,\r\n-            },\r\n-        });\r\n-        if (!note) return res.status(404).json({ message: \"Note not found\" });\r\n-        res.json(note);\r\n-    } catch (error) {\r\n-        res.status(500).json({ message: error.message });\r\n-    }\r\n-};\r\n-\r\n-// Update note\r\n-export const updateNote = [\r\n-    body('title').notEmpty().withMessage('Title is required'),\r\n-    body('date').notEmpty().isISO8601().withMessage('Valid date is required'),\r\n-    body('content').notEmpty().withMessage('Content is required'),\r\n-    async (req, res) => {\r\n-        const errors = validationResult(req);\r\n-        if (!errors.isEmpty()) {\r\n-            return res.status(400).json({ errors: errors.array() });\r\n-        }\r\n-\r\n-        const { title, date, content } = req.body;\r\n-\r\n-        try {\r\n-            const note = await Note.findOne({\r\n-                where: { id: req.params.id },\r\n-            });\r\n-\r\n-            if (!note) return res.status(404).json({ message: \"Note not found\" });\r\n-\r\n-            await Note.update({ title, date, content }, {\r\n-                where: { id: req.params.id },\r\n-            });\r\n-\r\n-            res.json({ message: \"Note updated successfully\" });\r\n-        } catch (error) {\r\n-            console.error(error);\r\n-            res.status(400).json({ message: error.message });\r\n-        }\r\n-    }\r\n-];\r\n-\r\n-// Delete note by ID\r\n-export const deleteNote = async (req, res) => {\r\n-    try {\r\n-        const note = await Note.findOne({\r\n-            where: {\r\n-                id: req.params.id,\r\n-            },\r\n-        });\r\n-        if (!note) return res.status(404).json({ message: \"Note not found\" });\r\n-\r\n-        await Note.destroy({\r\n-            where: {\r\n-                id: req.params.id,\r\n-            },\r\n-        });\r\n-\r\n-        res.json({ message: \"Note deleted successfully\" });\r\n-    } catch (error) {\r\n-        res.status(500).json({ message: error.message });\r\n-    }\r\n-};\r\n"
                },
                {
                    "date": 1733506688818,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,43 +1,35 @@\n import Note from \"../models/noteModel.js\";\r\n import { body, validationResult } from 'express-validator';\r\n \r\n // Create a new note\r\n-export const createNote = async (req, res) => {\r\n-    const errors = validationResult(req);\r\n-    if (!errors.isEmpty()) {\r\n-        return res.status(400).json({ errors: errors.array() });\r\n-    }\r\n+export const createNote = [\r\n+    body('title').notEmpty().withMessage('Title is required'),\r\n+    body('date').isISO8601().withMessage('Valid date is required'), // Validate date format\r\n+    body('note').notEmpty().withMessage('Content is required'),\r\n+    async (req, res) => {\r\n+        const errors = validationResult(req);\r\n+        if (!errors.isEmpty()) {\r\n+            return res.status(400).json({ errors: errors.array() });\r\n+        }\r\n \r\n-    // Get data from headers\r\n-    const title = req.headers['x-title'];\r\n-    const date = req.headers['x-date']; // Updated to 'date'\r\n-    const content = req.headers['x-content'];\r\n+        const { title, date, note } = req.body;\r\n \r\n-    // Check if all required headers are provided\r\n-    if (!title || !date || !content) {\r\n-        return res.status(400).json({ message: 'Missing required headers (x-title, x-date, or x-content)' });\r\n-    }\r\n+        try {\r\n+            // Create a new note in the database\r\n+            const newNote = await Note.create({\r\n+                title,\r\n+                date,\r\n+                note\r\n+            });\r\n \r\n-    try {\r\n-        // Validate if the date format is valid\r\n-        if (!Date.parse(date)) {\r\n-            return res.status(400).json({ errors: [{ msg: 'Invalid date format. Please use YYYY-MM-DD.' }] });\r\n+            res.status(201).json(newNote);\r\n+        } catch (error) {\r\n+            console.error(error);\r\n+            res.status(500).json({ message: 'Internal server error' });\r\n         }\r\n-\r\n-        // Create a new note in the database\r\n-        const note = await Note.create({\r\n-            title,\r\n-            date, // Updated to 'date'\r\n-            note: content\r\n-        });\r\n-\r\n-        res.status(201).json(note);\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ message: 'Internal server error' });\r\n     }\r\n-};\r\n+];\r\n \r\n // Get all notes\r\n export const getNotes = async (req, res) => {\r\n     try {\r\n@@ -65,9 +57,9 @@\n \r\n // Update note\r\n export const updateNote = [\r\n     body('title').notEmpty().withMessage('Title is required'),\r\n-    body('date').notEmpty().isISO8601().withMessage('Valid date is required'), // Updated to 'date'\r\n+    body('date').isISO8601().withMessage('Valid date is required'),\r\n     body('content').notEmpty().withMessage('Content is required'),\r\n     async (req, res) => {\r\n         const errors = validationResult(req);\r\n         if (!errors.isEmpty()) {\r\n@@ -89,9 +81,9 @@\n \r\n             res.json({ message: \"Note updated successfully\" });\r\n         } catch (error) {\r\n             console.error(error);\r\n-            res.status(400).json({ message: error.message });\r\n+            res.status(500).json({ message: error.message });\r\n         }\r\n     }\r\n ];\r\n \r\n"
                },
                {
                    "date": 1733506903045,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,23 +4,23 @@\n // Create a new note\r\n export const createNote = [\r\n     body('title').notEmpty().withMessage('Title is required'),\r\n     body('date').isISO8601().withMessage('Valid date is required'), // Validate date format\r\n-    body('note').notEmpty().withMessage('Content is required'),\r\n+    body('content').notEmpty().withMessage('Content is required'), // Use 'content' instead of 'note'\r\n     async (req, res) => {\r\n         const errors = validationResult(req);\r\n         if (!errors.isEmpty()) {\r\n             return res.status(400).json({ errors: errors.array() });\r\n         }\r\n \r\n-        const { title, date, note } = req.body;\r\n+        const { title, date, content } = req.body;\r\n \r\n         try {\r\n             // Create a new note in the database\r\n             const newNote = await Note.create({\r\n                 title,\r\n                 date,\r\n-                note\r\n+                content  // Ensure we are using 'content' for content column\r\n             });\r\n \r\n             res.status(201).json(newNote);\r\n         } catch (error) {\r\n@@ -58,9 +58,9 @@\n // Update note\r\n export const updateNote = [\r\n     body('title').notEmpty().withMessage('Title is required'),\r\n     body('date').isISO8601().withMessage('Valid date is required'),\r\n-    body('content').notEmpty().withMessage('Content is required'),\r\n+    body('content').notEmpty().withMessage('Content is required'), // Ensure 'content' is used\r\n     async (req, res) => {\r\n         const errors = validationResult(req);\r\n         if (!errors.isEmpty()) {\r\n             return res.status(400).json({ errors: errors.array() });\r\n"
                },
                {
                    "date": 1733507185056,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,36 +1,46 @@\n import Note from \"../models/noteModel.js\";\r\n import { body, validationResult } from 'express-validator';\r\n \r\n // Create a new note\r\n-export const createNote = [\r\n-    body('title').notEmpty().withMessage('Title is required'),\r\n-    body('date').isISO8601().withMessage('Valid date is required'), // Validate date format\r\n-    body('content').notEmpty().withMessage('Content is required'), // Use 'content' instead of 'note'\r\n-    async (req, res) => {\r\n-        const errors = validationResult(req);\r\n-        if (!errors.isEmpty()) {\r\n-            return res.status(400).json({ errors: errors.array() });\r\n-        }\r\n+import Note from \"../models/noteModel.js\";\r\n+import { validationResult } from 'express-validator';\r\n \r\n-        const { title, date, content } = req.body;\r\n+// Create a new note using headers\r\n+export const createNote = async (req, res) => {\r\n+    const errors = validationResult(req);\r\n+    if (!errors.isEmpty()) {\r\n+        return res.status(400).json({ errors: errors.array() });\r\n+    }\r\n \r\n-        try {\r\n-            // Create a new note in the database\r\n-            const newNote = await Note.create({\r\n-                title,\r\n-                date,\r\n-                content  // Ensure we are using 'content' for content column\r\n-            });\r\n+    // Get custom headers from the request\r\n+    const title = req.headers['x-title'];\r\n+    const date = req.headers['x-date'];\r\n+    const content = req.headers['x-content'];\r\n \r\n-            res.status(201).json(newNote);\r\n-        } catch (error) {\r\n-            console.error(error);\r\n-            res.status(500).json({ message: 'Internal server error' });\r\n-        }\r\n+    // Check if headers are present\r\n+    if (!title || !date || !content) {\r\n+        return res.status(400).json({ message: 'Title, Date, and Content are required' });\r\n     }\r\n-];\r\n \r\n+    try {\r\n+        // Create a new note in the database using values from headers\r\n+        const newNote = await Note.create({\r\n+            title,\r\n+            date,\r\n+            content\r\n+        });\r\n+\r\n+        res.status(201).json(newNote);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ message: 'Internal server error' });\r\n+    }\r\n+};\r\n+\r\n+// The rest of your CRUD methods will be similar to the ones previously provided\r\n+\r\n+\r\n // Get all notes\r\n export const getNotes = async (req, res) => {\r\n     try {\r\n         const notes = await Note.findAll();\r\n"
                },
                {
                    "date": 1733507201196,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,11 +1,9 @@\n import Note from \"../models/noteModel.js\";\r\n import { body, validationResult } from 'express-validator';\r\n \r\n-// Create a new note\r\n-import Note from \"../models/noteModel.js\";\r\n-import { validationResult } from 'express-validator';\r\n \r\n+\r\n // Create a new note using headers\r\n export const createNote = async (req, res) => {\r\n     const errors = validationResult(req);\r\n     if (!errors.isEmpty()) {\r\n"
                }
            ],
            "date": 1733502718950,
            "name": "Commit-0",
            "content": "import Note from \"../models/noteModel.js\";\r\nimport { body, validationResult } from 'express-validator';\r\n\r\n// Create a new note\r\nexport const createNote = [\r\n    body('title').notEmpty().withMessage('Title is required'),\r\n    body('datetime').notEmpty().isISO8601().withMessage('Valid date is required'),\r\n    body('note').notEmpty().withMessage('Content is required'),\r\n    async (req, res) => {\r\n        const errors = validationResult(req);\r\n        if (!errors.isEmpty()) {\r\n            return res.status(400).json({ errors: errors.array() });\r\n        }\r\n\r\n        const { title, datetime, note } = req.body;\r\n\r\n        try {\r\n            const notes = await Note.create({\r\n                title,\r\n                datetime,\r\n                note\r\n            });\r\n\r\n            res.status(201).json(notes);\r\n        } catch (error) {\r\n            console.error(error);\r\n            res.status(500).json({ message: 'Internal server error' });\r\n        }\r\n    }\r\n];\r\n\r\n// Get all notes\r\nexport const getNotes = async (req, res) => {\r\n    try {\r\n        const notes = await Note.findAll();\r\n        res.json(notes);\r\n    } catch (error) {\r\n        res.status(500).json({ message: error.message });\r\n    }\r\n};\r\n\r\n// Get single note by ID\r\nexport const getNoteById = async (req, res) => {\r\n    try {\r\n        const note = await Note.findOne({\r\n            where: {\r\n                id: req.params.id,\r\n            },\r\n        });\r\n        if (!note) return res.status(404).json({ message: \"Note not found\" });\r\n        res.json(note);\r\n    } catch (error) {\r\n        res.status(500).json({ message: error.message });\r\n    }\r\n};\r\n\r\n// Update note\r\nexport const updateNote = [\r\n    body('title').notEmpty().withMessage('Title is required'),\r\n    body('datetime').notEmpty().isISO8601().withMessage('Valid date is required'),\r\n    body('note').notEmpty().withMessage('Content is required'),\r\n    async (req, res) => {\r\n        const errors = validationResult(req);\r\n        if (!errors.isEmpty()) {\r\n            return res.status(400).json({ errors: errors.array() });\r\n        }\r\n\r\n        const { title, datetime, note } = req.body;\r\n\r\n        try {\r\n            const notes = await Note.findOne({\r\n                where: { id: req.params.id },\r\n            });\r\n\r\n            if (!notes) return res.status(404).json({ message: \"Note not found\" });\r\n\r\n            await Note.update({ title, datetime, note }, {\r\n                where: { id: req.params.id },\r\n            });\r\n\r\n            res.json({ message: \"Note updated successfully\" });\r\n        } catch (error) {\r\n            console.error(error);\r\n            res.status(400).json({ message: error.message });\r\n        }\r\n    }\r\n];\r\n\r\n// Delete note by ID\r\nexport const deleteNote = async (req, res) => {\r\n    try {\r\n        const note = await Note.findOne({\r\n            where: {\r\n                id: req.params.id,\r\n            },\r\n        });\r\n        if (!note) return res.status(404).json({ message: \"Note not found\" });\r\n\r\n        await Note.destroy({\r\n            where: {\r\n                id: req.params.id,\r\n            },\r\n        });\r\n\r\n        res.json({ message: \"Note deleted successfully\" });\r\n    } catch (error) {\r\n        res.status(500).json({ message: error.message });\r\n    }\r\n};\r\n"
        }
    ]
}